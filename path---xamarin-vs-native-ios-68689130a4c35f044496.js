webpackJsonp([72672217996739],{338:function(n,e){n.exports={data:{site:{siteMetadata:{url:"https://bodiddlie.github.io"}},markdownRemark:{html:'<p><em>I will preface this post with the statment that I have very, very little experience working\nwith Xamarin or native iOS development. Nothing I say here should be taken as anything more\nthan a quick, face-value judgement.</em></p>\n<p>At my job we\'re very much a Microsoft shop. Almost all of our code is C# and written for\nASP.NET and its various frameworks. Recently management made the decision to switch to\niPhones from Windows phones. This was mostly done because it turned out to\nbe hard to find vendors that supported Windows phones.</p>\n<p>We\'ve not done any mobile development internally before, but our development team thought\nthat this might be a good time to investigate the potential of writing our own, in-house,\nmobile apps. So we ordered some Mac minis, and set them up to hopefully start learning\niOS development. I personally started playing around with XCode and setting up a simple\nproof of concept app using one of our internal APIs.</p>\n<p>Jump to two weeks ago and the announcment at Microsoft\'s Build 2016 conference that Xamarin\nwould be free to use. With the prior pricing structure, Xamarin wasn\'t really a viable option\nfor us, especially because we didn\'t have any current plans to develop for the world at large,\nonly for internal organization use. Free though, is something we can\'t ignore; especially\nwhen we could continue to write our code in the C# that we are all most familiar with.</p>\n<p>So I worked up the same proof of concept using Xamarin. Here\'s the two relevant snippets:</p>\n<div class="gatsby-highlight">\n      <pre class="language-swift"><code class="language-swift"><span class="token comment">//Swift version</span>\n\n<span class="token keyword">import</span> <span class="token builtin">UIKit</span>\n<span class="token keyword">import</span> <span class="token builtin">Alamofire</span>\n\n<span class="token keyword">class</span> <span class="token class-name">DataViewController</span><span class="token punctuation">:</span> <span class="token builtin">UIViewController</span> <span class="token punctuation">{</span>\n  <span class="token atrule">@IBOutlet</span> <span class="token keyword">weak</span> <span class="token keyword">var</span> textView<span class="token punctuation">:</span> <span class="token builtin">UITextView</span><span class="token operator">!</span>\n\n  <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">let</span> un <span class="token operator">=</span> <span class="token string">"username"</span>\n    <span class="token keyword">let</span> pw <span class="token operator">=</span> <span class="token string">"password"</span>\n\n    <span class="token builtin">Alamofire</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">,</span> <span class="token string">"http://example.com/api/things"</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span>user<span class="token punctuation">:</span> un<span class="token punctuation">,</span> password<span class="token punctuation">:</span> pw<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span>responseJSON <span class="token punctuation">{</span> response <span class="token keyword">in</span>\n        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token constant">JSON</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>result<span class="token punctuation">.</span>value <span class="token punctuation">{</span>\n          <span class="token keyword">self</span><span class="token punctuation">.</span>textView<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">"JSON: <span class="token interpolation"><span class="token delimiter variable">\\(</span><span class="token constant">JSON</span><span class="token delimiter variable">)</span></span>"</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-c#"><code class="language-c#">//C# Xamarin version\n\nusing RestSharp;\nusing RestSharp.Authenticators;\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\nusing System.Net.Http;\nusing System.Text;\nusing System.Threading.Tasks;\nusing UIKit;\n\nnamespace IncidentProof\n{\npublic partial class ViewController : UIViewController\n{\npublic ViewController(IntPtr handle) : base(handle)\n{\n}\n\n        public override void ViewDidLoad()\n        {\n            base.ViewDidLoad();\n            // Perform any additional setup after loading the view, typically from a nib.\n\n            var client = new RestClient(&quot;http://example.com&quot;);\n            client.Authenticator = new NtlmAuthenticator(&quot;username&quot;, &quot;password&quot;);\n\n            var request = new RestRequest(&quot;api/things&quot;, Method.GET);\n            var response = client.Execute(request);\n            textView.Text = response.Content;\n        }\n\n        public override void DidReceiveMemoryWarning()\n        {\n            base.DidReceiveMemoryWarning();\n            // Release any cached data, images, etc that aren&#39;t in use.\n        }\n    }\n\n}</code></pre>\n      </div>\n<p>All these are doing is grabbing a bunch of JSON from a WebAPI endpoint, and dumping it as a\nstring into a text view. Nothing interesting, just wanted to see how it worked with our\nAPIs.</p>\n<h3>Coding Experience</h3>\n<hr>\n<p>Looking at just the code, I would say that I prefer the C# version, but that\'s probably\njust because of my familiarity with the language. The somewhat Ruby-esque nature of Swift\nis something I still need to get used to, but I can see the appeal of it, especially when\ncompared to Objective-C.</p>\n<p>In both, I\'m using third-party libraries to facilitate the network call to the API. Alamofire\nappears to be one of the leading libraries for doing this kind of thing in the iOS world,\nand RestSharp was mentioned specifically in a few places in the official Xamarin docs.</p>\n<h3>Development Workflow</h3>\n<hr>\n<p>While working in C# feels more comfortable, I have to say that the rest of the dev workflow\nwith Xamarin feels clunky at best. When designing directly for iOS, the designer actually\nremotely connects to your Mac and gives you a reasonable facsimille of Interface Builder to\nlayout your views. Unfortunately, it seems slow, not as easy to use as the actual IB, and I\nran in to multiple times where I needed to toggle the sharing functionality off and on again\non my Mac so that Visual Studio could connect again.</p>\n<p>The build/debug process is much the same. It remotely connects to the Mac and loads the app\nin the simulator. I ran into many of the same issues, and the startup time from code change,\nto running app seemed woefully slow.</p>\n<p>It appears that if I were to use Xamarin.Forms instead of designly directly to iOS, then I\nwouldn\'t have the Interface Builder problems. However, .Forms uses XAML for its layout,\nand that\'s one Microsoft technology that I\'ve never really embraced. I have enough XML based\nmarkup languages in my life, thank you very much.</p>\n<p>Working in XCode seems to be a pretty good experience from what I can tell. I know that a\nlot of people deride the IDE and I\'ve heard plenty of horror stories of it crashing constantly,\nbut in my very limited experience with it, it seemed to be fine. Interface Builder and the\nstoryboard system strike me as being one of the best visual designers I\'ve played with.\nThe Autolayout stuff can be fairly obtuse, but I\'m sure I\'ll get the hang of it eventually.</p>\n<h3>So which one?</h3>\n<hr>\n<p>At this point it\'s looking to me like sticking with learning Swift and doing native iOS\nwill be the best road to take. I\'ve always felt that a good developer will be good regardless\nof the language they are using, so learning Swift shouldn\'t be a roadblock for us. With that\nout of the way, we\'re left with the experience of working with both toolsets. For me personally,\nthe things that irritate me about Xamarin seem to outweigh the ability to stick with a familiar\nenvironment.</p>',frontmatter:{title:"Xamarin vs Native Swift for iOS Development",date:"Apr 13, 2016"},fields:{slug:"/xamarin-vs-native-ios/"}}},pathContext:{slug:"/xamarin-vs-native-ios/"}}}});
//# sourceMappingURL=path---xamarin-vs-native-ios-68689130a4c35f044496.js.map