webpackJsonp([46329880526003],{335:function(n,s){n.exports={data:{site:{siteMetadata:{url:"https://bodiddlie.github.io"}},markdownRemark:{html:'<p><strong>Update: 09/26/2016</strong> Updated repo to Angular 2 final. See <a href="https://github.com/bodiddlie/rxheroes">the repo</a> for more info.</p>\n<p>I recently was tasked with starting a brand new project at work that would be used for taking\nsome simple internal surveys. Something like SurveyMonkey was overkill for what we\'re looking for,\nbut using the built-in survey features in SharePoint (I know, I know, ugh) weren\'t going to be\npowerful enough. I originally planned on writing the application in Angular 1, but after going\nto a local Angular user group meeting, I decided to try writing it with Angular 2.</p>\n<h3>Redux-like Concepts</h3>\n<hr>\n<p>I\'ve been playing around a bit with React/Redux on the side, and the patterns that emerge from\nthat combination appeal to me. Using pure functions as reducers make testing so simple. Not mutating\nstate makes debugging much easier to reason about, not to mention the possibility of time-travel/undo\nthat it affords.</p>\n<p><a href="https://github.com/ngrx/store">Ngrx/store</a> is a Redux inspired library for Angular 2. It operates on many\nof the same concepts: actions, reducers, and a single store. The unique part here is that the DNA of\nngrx/store is all about <a href="https://github.com/Reactive-Extensions/RxJS">RXJS</a>. Observables are at the heart of\nwhat makes ngrx/store tick. Check out the <a href="https://gist.github.com/btroncone/a6e4347326749f938510">Comprehensive Introduction to @ngrx/store</a>\nand <a href="http://onehungrymind.com/build-better-angular-2-application-redux-ngrx/">Lukas Ruebbelke\'s great post on ngrx</a>\nfor an overview.</p>\n<p>The one problem I\'ve always had with the Redux pattern is that it seems like a lot of\nboilerplate and abstractions to jump through to get to a functional state. You\'ve got actions,\nreducers, the store, and then somewhere in there async data from a server needs to fit in\nsomehow. There are tons of tutorials out there that go over the basics of using Redux, but\nit\'s hard to find a lot of info on fitting it all together. Even once your figure out how they all fit\ntogether, it can seem like a lot of extra work with little benefit.</p>\n<p>My hope with this post is to convey that "Aha!" moment I had where the benefit became clear to me, and I made up\nmy mind that this was a really great way to architect an application. I thought that rewriting the\n<a href="https://angular.io/docs/ts/latest/tutorial/">Angular 2 Tour of Heroes example application</a>\nwith the ngrx suite, would be a great way to show these concepts.</p>\n<h3>A brief word on setup</h3>\n<hr>\n<p>Before we get started, I wanted to go over some of the infrastructure details of the example. You can see the\ncomplete example app at <a href="https://github.com/bodiddlie/rxheroes">my github</a>.</p>\n<p>I\'m using <a href="https://webpack.github.io/">webpack</a> as my module loader/build tool. While webpack is not required\nfor using any of the libraries discussed, my use of it makes a couple minor differences in code. Any\ncomponent templates and styles are <code class="language-text">required</code> and placed into the <code class="language-text">template</code> and <code class="language-text">styles</code> properties in the\n<code class="language-text">@Component</code> decorator as opposed to using their related URL siblings. Everything else should be\ninterchangeable with SystemJS (don\'t quote me on that, though). For a great intro to using webpack with\nAngular 2, check out the <a href="https://angular.io/docs/ts/latest/guide/webpack.html">docs</a>.</p>\n<p>One other quick difference from the Tour of Heroes tutorial is that for my backend http calls, I\'m using\nthe node package <a href="https://github.com/typicode/json-server">json-server</a>. Using this in conjunction with a\nwebpack-dev-server configuration allows me to proxy all calls to <code class="language-text">/api/*</code> to the <code class="language-text">json-server</code> instance. This\nserves up data from a simple JSON file. I found this method to be useful in the project I\'m working\non as I can mock out my backend API without having to spin up IIS express (the backend for that is a ASP.NET\nWeb API project).</p>\n<h3>Taking Action</h3>\n<hr>\n<p>At the heart of ngrx/store is the Action. By dispatching actions to the store, the state of our application is\nupdated. There are many ways to construct actions and dispatch them. They are, after all just simple\nobjects with a <code class="language-text">type</code> and a <code class="language-text">payload</code> property. The <a href="https://github.com/ngrx/example-app">ngrx example app</a>\nuses a structure that may seem verbose, but I feel is very extensible and easy to maintain. Here\'s the\ncontents of our Tour of Heroes actions:</p>\n<div class="gatsby-highlight">\n      <pre class="language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@angular/core\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Action <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@ngrx/store\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Hero <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'../models\'</span><span class="token punctuation">;</span>\n\n@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HeroActions</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> LOAD_HEROES <span class="token operator">=</span> <span class="token string">\'[Hero] Load Heroes\'</span><span class="token punctuation">;</span>\n  <span class="token function">loadHeroes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Action <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token keyword">type</span><span class="token punctuation">:</span> HeroActions<span class="token punctuation">.</span>LOAD_HEROES<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">static</span> LOAD_HEROES_SUCCESS <span class="token operator">=</span> <span class="token string">\'[Hero] Load Heroes Success\'</span><span class="token punctuation">;</span>\n  <span class="token function">loadHeroesSuccess</span><span class="token punctuation">(</span>heroes<span class="token punctuation">)</span><span class="token punctuation">:</span> Action <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token keyword">type</span><span class="token punctuation">:</span> HeroActions<span class="token punctuation">.</span>LOAD_HEROES_SUCCESS<span class="token punctuation">,</span>\n      payload<span class="token punctuation">:</span> heroes<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">static</span> GET_HERO <span class="token operator">=</span> <span class="token string">\'[Hero] Get Hero\'</span><span class="token punctuation">;</span>\n  <span class="token function">getHero</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">:</span> Action <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token keyword">type</span><span class="token punctuation">:</span> HeroActions<span class="token punctuation">.</span>GET_HERO<span class="token punctuation">,</span>\n      payload<span class="token punctuation">:</span> id<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">static</span> GET_HERO_SUCCESS <span class="token operator">=</span> <span class="token string">\'[Hero] Get Hero Success\'</span><span class="token punctuation">;</span>\n  <span class="token function">getHeroSuccess</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">:</span> Action <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token keyword">type</span><span class="token punctuation">:</span> HeroActions<span class="token punctuation">.</span>GET_HERO_SUCCESS<span class="token punctuation">,</span>\n      payload<span class="token punctuation">:</span> hero<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">static</span> RESET_BLANK_HERO <span class="token operator">=</span> <span class="token string">\'[Hero] Reset Blank Hero\'</span><span class="token punctuation">;</span>\n  <span class="token function">resetBlankHero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Action <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token keyword">type</span><span class="token punctuation">:</span> HeroActions<span class="token punctuation">.</span>RESET_BLANK_HERO<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">static</span> SAVE_HERO <span class="token operator">=</span> <span class="token string">\'[Hero] Save Hero\'</span><span class="token punctuation">;</span>\n  <span class="token function">saveHero</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">:</span> Action <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token keyword">type</span><span class="token punctuation">:</span> HeroActions<span class="token punctuation">.</span>SAVE_HERO<span class="token punctuation">,</span>\n      payload<span class="token punctuation">:</span> hero<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">static</span> SAVE_HERO_SUCCESS <span class="token operator">=</span> <span class="token string">\'[Hero] Save Hero Success\'</span><span class="token punctuation">;</span>\n  <span class="token function">saveHeroSuccess</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">:</span> Action <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token keyword">type</span><span class="token punctuation">:</span> HeroActions<span class="token punctuation">.</span>SAVE_HERO_SUCCESS<span class="token punctuation">,</span>\n      payload<span class="token punctuation">:</span> hero<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">static</span> ADD_HERO <span class="token operator">=</span> <span class="token string">\'[Hero] Add Hero\'</span><span class="token punctuation">;</span>\n  <span class="token function">addHero</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">:</span> Action <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token keyword">type</span><span class="token punctuation">:</span> HeroActions<span class="token punctuation">.</span>ADD_HERO<span class="token punctuation">,</span>\n      payload<span class="token punctuation">:</span> hero<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">static</span> ADD_HERO_SUCCESS <span class="token operator">=</span> <span class="token string">\'[Hero] Add Hero Success\'</span><span class="token punctuation">;</span>\n  <span class="token function">addHeroSuccess</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">:</span> Action <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token keyword">type</span><span class="token punctuation">:</span> HeroActions<span class="token punctuation">.</span>ADD_HERO_SUCCESS<span class="token punctuation">,</span>\n      payload<span class="token punctuation">:</span> hero<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">static</span> DELETE_HERO <span class="token operator">=</span> <span class="token string">\'[Hero] Delete Hero\'</span><span class="token punctuation">;</span>\n  <span class="token function">deleteHero</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">:</span> Action <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token keyword">type</span><span class="token punctuation">:</span> HeroActions<span class="token punctuation">.</span>DELETE_HERO<span class="token punctuation">,</span>\n      payload<span class="token punctuation">:</span> hero<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">static</span> DELETE_HERO_SUCCESS <span class="token operator">=</span> <span class="token string">\'[Hero] Delete Hero Success\'</span><span class="token punctuation">;</span>\n  <span class="token function">deleteHeroSuccess</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">:</span> Action <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token keyword">type</span><span class="token punctuation">:</span> HeroActions<span class="token punctuation">.</span>DELETE_HERO_SUCCESS<span class="token punctuation">,</span>\n      payload<span class="token punctuation">:</span> hero<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>I won\'t spend a lot of time on this file as it is fairly simple and can seem almost repetitive. I\'ll just\nhighlight a few key points. I start with the imports. Using <code class="language-text">@Injectable</code> allows this to be injected by\nthe Angular 2 dependency injector. <code class="language-text">Action</code> is a simple interface that ngrx/store provides and since we\'re\nusing Typescript we might as well have all the type checking we can get. The <code class="language-text">Hero</code> model is no different\nfrom what is used in the official tutorial.</p>\n<div class="gatsby-highlight">\n      <pre class="language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@angular/core\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Action <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@ngrx/store\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Hero <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'../models\'</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Next we have our class that defines our actions. Since an action type is just a unique string, I include all\nthe action types as static properties on the class. This makes them easy to use and alleviates the problem\nof having a typo in a magic string somewhere in the app. You\'ll see a pattern here for most of the actions\nwhere I have an initial action and a success action. This maps out to any asynchronous actions we might take.\nThe initial action kicks off a chain of events, and the success action notifies the application\nthat the state has been successfully updated. In a real world application, you would also want to have\nseparate error actions for handling unsuccessful calls.</p>\n<p>Sometimes an action does not include a payload, like in the <code class="language-text">LOAD_HEROES</code> action. This action doesn\'t need\nto convey any information other than notifying that it is being dispatched. Its subsequent success action\nhas a payload that contains all the loaded heroes. The <code class="language-text">SAVE_HERO</code> action includes a payload, which is the\nhero we wish to save. Its success action also includes the saved hero as a payload. You\'ll see why all of\nthis is important in the next section on reducers.</p>\n<div class="gatsby-highlight">\n      <pre class="language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HeroActions</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> LOAD_HEROES <span class="token operator">=</span> <span class="token string">\'[Hero] Load Heroes\'</span><span class="token punctuation">;</span>\n  <span class="token function">loadHeroes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Action <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token keyword">type</span><span class="token punctuation">:</span> HeroActions<span class="token punctuation">.</span>LOAD_HEROES<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">static</span> LOAD_HEROES_SUCCESS <span class="token operator">=</span> <span class="token string">\'[Hero] Load Heroes Success\'</span><span class="token punctuation">;</span>\n  <span class="token function">loadHeroesSuccess</span><span class="token punctuation">(</span>heroes<span class="token punctuation">)</span><span class="token punctuation">:</span> Action <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token keyword">type</span><span class="token punctuation">:</span> HeroActions<span class="token punctuation">.</span>LOAD_HEROES_SUCCESS<span class="token punctuation">,</span>\n      payload<span class="token punctuation">:</span> heroes<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">static</span> SAVE_HERO <span class="token operator">=</span> <span class="token string">\'[Hero] Save Hero\'</span><span class="token punctuation">;</span>\n  <span class="token function">saveHero</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">:</span> Action <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token keyword">type</span><span class="token punctuation">:</span> HeroActions<span class="token punctuation">.</span>SAVE_HERO<span class="token punctuation">,</span>\n      payload<span class="token punctuation">:</span> hero<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">static</span> SAVE_HERO_SUCCESS <span class="token operator">=</span> <span class="token string">\'[Hero] Save Hero Success\'</span><span class="token punctuation">;</span>\n  <span class="token function">saveHeroSuccess</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">:</span> Action <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token keyword">type</span><span class="token punctuation">:</span> HeroActions<span class="token punctuation">.</span>SAVE_HERO_SUCCESS<span class="token punctuation">,</span>\n      payload<span class="token punctuation">:</span> hero<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Having the actions setup in this way makes it very convenient when we are later building our components. By\nbeing able to inject them, we can have access to those actions wherever we need them, and can quickly\nand easily dispatch them to the store.</p>\n<div class="gatsby-highlight">\n      <pre class="language-typescript"><code class="language-typescript">@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">SomeComponent</span> implments OnInit <span class="token punctuation">{</span>\n<span class="token keyword">constructor</span><span class="token punctuation">(</span>\n<span class="token keyword">private</span> heroActions<span class="token punctuation">:</span> HeroActions<span class="token punctuation">,</span>\n<span class="token keyword">private</span> store<span class="token punctuation">:</span> Store<span class="token operator">&lt;</span>AppState<span class="token operator">></span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n    <span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heroActions<span class="token punctuation">.</span><span class="token function">loadHeroes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>You\'ll see how this all ties together later.</p>\n<h3>A Fine Wine Reduction</h3>\n<hr>\n<p>Ah reducers. The deceptively simple functions that end up being the representation of your application\'s state.\nFor me, this was one of the concepts that I had a hard time wrapping my head around. Not how the functions work,\nbut in how they are actually consumed and mapped out to the rest of the application.</p>\n<p>The concept of a reducer is very simple. It\'s a pure function, meaning that it produces no side effects, that\ngiven a state, and an action, will return a new state. That textbook definition is all\nwell and good, but what does it mean to us in practice?</p>\n<p>In ngrx/store, each reducer function is used to represent some branch of our application state. Let\'s look\nat the Tour of Heroes reducers as an example. We\'ll start with the index file that builds out the final\nstate represenation, and then show each individual reducer.</p>\n<div class="gatsby-highlight">\n      <pre class="language-typescript"><code class="language-typescript"><span class="token comment">//app/reducers/index.ts</span>\n<span class="token comment">//imports snipped for brevity</span>\n\n<span class="token keyword">import</span> heroListReducer<span class="token punctuation">,</span> _ <span class="token keyword">as</span> fromHeroList <span class="token keyword">from</span> <span class="token string">\'./hero-list\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> heroReducer<span class="token punctuation">,</span> _ <span class="token keyword">as</span> fromHero <span class="token keyword">from</span> <span class="token string">\'./hero\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">AppState</span> <span class="token punctuation">{</span>\n  heroes<span class="token punctuation">:</span> fromHeroList<span class="token punctuation">.</span>HeroListState<span class="token punctuation">;</span>\n  hero<span class="token punctuation">:</span> fromHero<span class="token punctuation">.</span>HeroState<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">compose</span><span class="token punctuation">(</span>combineReducers<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  heroes<span class="token punctuation">:</span> heroListReducer<span class="token punctuation">,</span>\n  hero<span class="token punctuation">:</span> heroReducer\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>After importing all our library stuff, we bring in the reducer functions themselves, as well as any other\nexports from those files. The other exports in this case are simple interfaces representing the state of\nthat reducer. The nice thing about this, is that each reducer is only given the state that is relevant to it.\nIn our application, the <code class="language-text">heroListReducer</code> only cares about the list of heroes and not a single selected hero.\nThis separation makes the logic much easier to reason about, although it took me some time to figure out exactly\nhow the state moved around the application.</p>\n<p>The <code class="language-text">AppState</code> interface is just a simple final representation of the state for the entire app. We\'ll use this\nlater when we are grabbing a reference to the store and selecting data from it.</p>\n<p>The default export for this module is the combination of all the reducers into one final state. <code class="language-text">compose</code> and\n<code class="language-text">combineReducers</code> come from the ngrx suite. You don\'t have to do it this way, but it seems to be the most\nconvenient to me.</p>\n<p>Now let\'s take a look at the hero-list reducer:</p>\n<div class="gatsby-highlight">\n      <pre class="language-typescript"><code class="language-typescript"><span class="token comment">//app/reducers/hero-list.ts</span>\n<span class="token comment">//imports snipped for brevity</span>\n\n<span class="token keyword">export</span> <span class="token keyword">type</span> HeroListState <span class="token operator">=</span> Hero<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> initialState<span class="token punctuation">:</span> HeroListState <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p><code class="language-text">HeroListState</code> is the representation of the shape of the state that this reducer will produce. In this instance\nit\'s just an array of <code class="language-text">Hero</code> objects. In the real world, you would probably include some other info, such\nas if the list is currently loading or not, so you can display something like a spinner. We then set up an initial\nstate of an empty array. We use this below as a default parameter to the function, so that we always have a\nvalid state coming in to the function.</p>\n<div class="gatsby-highlight">\n      <pre class="language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span>state <span class="token operator">=</span> initialState<span class="token punctuation">,</span> action<span class="token punctuation">:</span> Action<span class="token punctuation">)</span><span class="token punctuation">:</span> HeroListState <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>The basic reducer signature is a function that takes in a state and an action, and returns a new state. Here\nwe are giving a default value of the <code class="language-text">initialState</code> so we at least always have a valid empty array. We are\nreturning a <code class="language-text">HeroListState</code> which again is just an array of <code class="language-text">Hero</code> objects. We do a <code class="language-text">switch</code> on the type of\naction, and then do whatever we need to generate a new state.</p>\n<div class="gatsby-highlight">\n      <pre class="language-typescript"><code class="language-typescript"><span class="token keyword">case</span> HeroActions<span class="token punctuation">.</span>LOAD_HEROES_SUCCESS<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>When we have successfully retrieved the heroes from the server, we just want to return the payload, which\nwill be an array of <code class="language-text">Hero</code> objects. Simple.</p>\n<div class="gatsby-highlight">\n      <pre class="language-typescript"><code class="language-typescript"><span class="token keyword">case</span> HeroActions<span class="token punctuation">.</span>ADD_HERO_SUCCESS<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>state<span class="token punctuation">,</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>After successfully adding a brand new hero, we just need to add it to the array. However, since reducers\nshould not modify existing state, but rather return a new state, we compose a new array using the spread\noperator from ES6.</p>\n<div class="gatsby-highlight">\n      <pre class="language-typescript"><code class="language-typescript"><span class="token keyword">case</span> HeroActions<span class="token punctuation">.</span>SAVE<span class="token operator">*</span>HERO_SUCCESS<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span>id<span class="token punctuation">:</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>\n      <span class="token operator">...</span>state<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      action<span class="token punctuation">.</span>payload<span class="token punctuation">,</span>\n      <span class="token operator">...</span>state<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> state<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Saving an existing hero requires building out a new array with the old hero replaced by the new one. I\'m using\n<a href="https://lodash.com/">lodash</a> here to quickly find the index of the old hero and using the array <code class="language-text">slice</code> method\nalong with the ES7 spread operator to build out a new array.</p>\n<div class="gatsby-highlight">\n      <pre class="language-typescript"><code class="language-typescript"><span class="token keyword">case</span> HeroActions<span class="token punctuation">.</span>DELETE_HERO_SUCCESS<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> state<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>hero <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> hero<span class="token punctuation">.</span>id <span class="token operator">!==</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>id<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Deleting a hero is as simple as returning a new array that no longer contains the old hero. <code class="language-text">filter</code> is perfect\nfor that.</p>\n<div class="gatsby-highlight">\n      <pre class="language-typescript"><code class="language-typescript"><span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> state<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Earlier I said that only the relevant state is passed to a reducer. It also is sent every single\naction that is dispatched to the store. This makes sense, but could easily be forgotten as often the actions\nand state map neatly together (although not always). Since a reducer needs to always return a valid state,\nif we get an action we don\'t care about (or is invalid), we just return the state we were given.</p>\n<p>Now let\'s look at the other reducer for handling a single hero.</p>\n<div class="gatsby-highlight">\n      <pre class="language-typescript"><code class="language-typescript"><span class="token comment">// /app/reducers/hero.ts</span>\n<span class="token operator">...</span>\n<span class="token keyword">export</span> <span class="token keyword">type</span> HeroState <span class="token operator">=</span> Hero<span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> initialState<span class="token punctuation">:</span> HeroState <span class="token operator">=</span> <span class="token punctuation">{</span>\n  id<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  name<span class="token punctuation">:</span> <span class="token string">\'\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Another simple representation of state here as it is just a <code class="language-text">Hero</code> model. Creating a new type here is just\nto simplify imports where the full AppState is concerned. We then setup <code class="language-text">initialState</code> as a blank hero.</p>\n<div class="gatsby-highlight">\n      <pre class="language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span>state <span class="token operator">=</span> initialState<span class="token punctuation">,</span> action<span class="token punctuation">:</span> Action<span class="token punctuation">)</span><span class="token punctuation">:</span> HeroState <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> HeroActions<span class="token punctuation">.</span>RESET_BLANK_HERO<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> initialState<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">case</span> HeroActions<span class="token punctuation">.</span>GET_HERO_SUCCESS<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> state<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>We\'re really only dealing with two actions here. The first is when we want to deal with a new, blank hero. In\nthat case we just return the <code class="language-text">initialState</code> as an empty hero object. The other is when we have successfully\nretrieved a single hero from the server. There we just return the given payload.</p>\n<p>The really nice thing about reducers is that they are easily testable without having to jump through a bunch\nof Angular 2 test setup hoops. No dependency injection to muss with, no http backend to mock. It\'s just a\nfunction that doesn\'t care about anything else and produces no side effects. The definition of highly testable code.</p>\n<div class="gatsby-highlight">\n      <pre class="language-typescript"><code class="language-typescript"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">\'HeroList\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">\'should return an array with the new hero added to it\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> oldState <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">\'First\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">\'Second\'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> newHero <span class="token operator">=</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">\'New Guy\'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> newState <span class="token operator">=</span> <span class="token function">heroReducer</span><span class="token punctuation">(</span>oldState<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      <span class="token keyword">type</span><span class="token punctuation">:</span> HeroActions<span class="token punctuation">.</span>ADD_HERO_SUCCESS<span class="token punctuation">,</span>\n      payload<span class="token punctuation">:</span> newHero<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">expect</span><span class="token punctuation">(</span>newState<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>By carefully thinking about the shape and structure of the state of your application, and building your reducers\nproperly, you can remove a lot of logic from your components into these little bits that much more easily tested.\nThat\'s probably one of the biggest benefits in my mind!</p>\n<h3>Service With a Smile</h3>\n<hr>\n<p>Okay, simple pure functions, neat self-describable action classes. That\'s great Nick. Fantastic. Now where the\nhell is all the data coming from? You haven\'t used <code class="language-text">http</code> at all anywhere yet. What good is an application\nthat doesn\'t communicate to a server in someway?</p>\n<p>This was something that I struggled with when playing around with React/Redux and in initially looking at\nngrx/store. Most of the examples out there are trivial and work with state that exists only within the\nclient side code. It wasn\'t until I found the ngrx example app and spent a few days really understanding it\nthat I was able to wrap my head around this.</p>\n<p>But first to get data we need to call out to the server, and what better place to do that than in a service?</p>\n<div class="gatsby-highlight">\n      <pre class="language-typescript"><code class="language-typescript"><span class="token comment">// /app/services/hero.ts</span>\n<span class="token operator">...</span>\n@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HeroService</span> <span class="token punctuation">{</span>\n<span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> http<span class="token punctuation">:</span> Http<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n    <span class="token function">getHeroes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Observable<span class="token operator">&lt;</span>Hero<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">\'/api/heroes\'</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>res <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">getHero</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">:</span> Observable<span class="token operator">&lt;</span>Hero<span class="token operator">></span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">\'/api/heroes/\'</span> <span class="token operator">+</span> id<span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>res <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">saveHero</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>hero<span class="token punctuation">.</span>id <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>http<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">\'/api/heroes\'</span><span class="token punctuation">,</span> hero<span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>res <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>http<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">\'/api/heroes/\'</span> <span class="token operator">+</span> hero<span class="token punctuation">.</span>id<span class="token punctuation">,</span> hero<span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>res <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">deleteHero</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>http<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">\'/api/heroes/\'</span> <span class="token operator">+</span> hero<span class="token punctuation">.</span>id<span class="token punctuation">)</span>\n        <span class="token function">map</span><span class="token punctuation">(</span>res <span class="token operator">=></span> hero<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>This is all pretty standard Angular 2 stuff. Notice that we\'re returning Observables. The only other thing\nto point out here is that in the <code class="language-text">deleteHero</code> method, in the <code class="language-text">map</code>, we\'re returning the passed in hero. The\n<code class="language-text">DELETE</code> call doesn\'t return any response body, but our effect and subsequent action will need to know\nwhat hero to act on. We\'ll see that later.</p>\n<h3>Cause and ngrx/effects</h3>\n<hr>\n<p>So we\'ve got our service that can retrieve data from the backend, but where should we use it? Let\'s think\nabout the case where the application first loads up and we want to load the list of heroes. We have an action\nfor starting this with <code class="language-text">LOAD_HEROES</code>. So we should just use that action, right? Well, yes that\'s what we\'ll\nend up doing, but as it stands currently, that won\'t do anything.</p>\n<p>If you look back at our reducer, it only cares about the <code class="language-text">LOAD_HEROES_SUCCESS</code> action. So how do we get from\nthe initial action to the success one? We could just call the service in our components and pass the data\nfrom there to our actions and through the store. That works, but that ends up putting more logic into our\ncomponents, which we\'re trying to avoid. Also, moving all of this out to the ngrx chain enables some\ninteresting behavior. For instance, if we had multiple components across the application that are loading\nthe list of heroes, we could do things like debounce the call, to avoid calling the server too frequently.\nSomething like that becomes really easy to do when we separate it out in this way.</p>\n<p>So, where do we make the call then? This is where <a href="https://github.com/ngrx/effects">ngrx/effects</a> comes in.\nNgrx/effects is a library that enables you to generate side effects when actions are dispatched to the\nstore. I know I said earlier that side effects are unwanted, but in this case we are taking action based off\nof previous actions and not mutating state.</p>\n<p>A simple way to think of it is that ngrx/effects is an event listener of sorts. It listens for actions\nbeing dispatched to the store. You can then tell ngrx/effects that when a particular action is dispatched,\nto take another, new action as a result. At the end, what\'s really happening is ngrx/effects is an action\ngenerator that dispatches a new action as a result of a different action.</p>\n<p>Let\'s take a look at the Tour of Heroes effects.</p>\n<div class="gatsby-highlight">\n      <pre class="language-typescript"><code class="language-typescript"><span class="token comment">// /app/effects/hero.ts</span>\n<span class="token operator">...</span>\n\n@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HeroEffects</span> <span class="token punctuation">{</span>\n  <span class="token keyword">constructor</span> <span class="token punctuation">(</span>\n    <span class="token keyword">private</span> update$<span class="token punctuation">:</span> StateUpdates<span class="token operator">&lt;</span>AppState<span class="token operator">></span><span class="token punctuation">,</span>\n    <span class="token keyword">private</span> heroActions<span class="token punctuation">:</span> HeroActions<span class="token punctuation">,</span>\n    <span class="token keyword">private</span> svc<span class="token punctuation">:</span> HeroService\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token operator">...</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>In our constructor we\'re asking for a few things to be injected. The <code class="language-text">update$</code> variable is a <code class="language-text">StateUpdate</code> from\nngrx/effects. This is an observable that emits everytime an action flows through the store. We then have our\naction class and service.</p>\n<div class="gatsby-highlight">\n      <pre class="language-typescript"><code class="language-typescript"><span class="token operator">...</span>\n@<span class="token function">Effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> loadHeroes$ <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>update$\n  <span class="token punctuation">.</span><span class="token function">whenAction</span><span class="token punctuation">(</span>HeroActions<span class="token punctuation">.</span>LOAD_HEROES<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">switchMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>svc<span class="token punctuation">.</span><span class="token function">getHeroes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>heroes <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>heroActions<span class="token punctuation">.</span><span class="token function">loadHeroesSuccess</span><span class="token punctuation">(</span>heroes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Here\'s our first effect. We first subscribe to the <code class="language-text">update$</code> observable by asking for anytime the <code class="language-text">LOAD_HEROES</code>\naction is dispatched. Then we call <code class="language-text">switchMap</code> on that as we\'re going to get a whole new observable from the\nservice that we want to emit from (if this Observable stuff is confusing, you\'re not alone. Check out this\n<a href="http://reactivex.io/rxjs/manual/overview.html">awesome manual on rxjs</a> to get a better grasp). The\nsubsequent <code class="language-text">map</code> call then operates on a list of heroes from the service. We pass that list to our action\ncreator <code class="language-text">loadHeroesSuccess</code>. Ngrx/effects then will take care of dispatching this new action to the store for us.</p>\n<p>The other effects take a similar approach.</p>\n<div class="gatsby-highlight">\n      <pre class="language-typescript"><code class="language-typescript"><span class="token operator">...</span>\n@<span class="token function">Effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> getHero$ <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>update$\n  <span class="token punctuation">.</span><span class="token function">whenAction</span><span class="token punctuation">(</span>HeroActions<span class="token punctuation">.</span>GET_HERO<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span>map<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">(</span>toPayload<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">switchMap</span><span class="token punctuation">(</span>id <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>svc<span class="token punctuation">.</span><span class="token function">getHero</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>hero <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>heroActions<span class="token punctuation">.</span><span class="token function">getHeroSuccess</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n@<span class="token function">Effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> saveHero$ <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>update$\n  <span class="token punctuation">.</span><span class="token function">whenAction</span><span class="token punctuation">(</span>HeroActions<span class="token punctuation">.</span>SAVE_HERO<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>update <span class="token operator">=></span> update<span class="token punctuation">.</span>action<span class="token punctuation">.</span>payload<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">switchMap</span><span class="token punctuation">(</span>hero <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>svc<span class="token punctuation">.</span><span class="token function">saveHero</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>hero <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>heroActions<span class="token punctuation">.</span><span class="token function">saveHeroSuccess</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n@<span class="token function">Effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> addHero$ <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>update$\n  <span class="token punctuation">.</span><span class="token function">whenAction</span><span class="token punctuation">(</span>HeroActions<span class="token punctuation">.</span>ADD_HERO<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>update <span class="token operator">=></span> update<span class="token punctuation">.</span>action<span class="token punctuation">.</span>payload<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">switchMap</span><span class="token punctuation">(</span>hero <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>svc<span class="token punctuation">.</span><span class="token function">saveHero</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>hero <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>heroActions<span class="token punctuation">.</span><span class="token function">addHeroSuccess</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n@<span class="token function">Effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> deleteHero$ <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>update$\n  <span class="token punctuation">.</span><span class="token function">whenAction</span><span class="token punctuation">(</span>HeroActions<span class="token punctuation">.</span>DELETE_HERO<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>update <span class="token operator">=></span> update<span class="token punctuation">.</span>action<span class="token punctuation">.</span>payload<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">switchMap</span><span class="token punctuation">(</span>hero <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>svc<span class="token punctuation">.</span><span class="token function">deleteHero</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>hero <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>heroActions<span class="token punctuation">.</span><span class="token function">deleteHeroSuccess</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Note the delete effect. Earlier in the service section I said that we were returning the hero that got passed to\nthe service. This is so that this effect can take that hero and send it on in the <code class="language-text">DELETE_HERO_SUCESS</code> action.</p>\n<p>So now the data is able to move around and be acted upon, we just need to create some components to display it.</p>\n<h3>Children Should be Contained and Displayed</h3>\n<hr>\n<p>A pattern that has emerged from the React community and is starting to take hold in Angular 2 as well is the\nidea of Smart vs Dumb components. Labeling them as smart vs dumb components can be misleading as the "dumb" components\naren\'t dumb, just light on logic. I like thinking of them as Container components and Display\ncomponents. This also can be misleading as containers often have some display pieces as well.</p>\n<p>The basic idea is there is a container component that is responsible for gathering all the data to display\nand handling all the UI logic. It then delegates the actual rendering and UI event handling to child display\ncomponents. In Angular 2, you use <code class="language-text">Input</code> and <code class="language-text">Output</code> properties on the display components to achieve this.\nLet\'s look at the <code class="language-text">Heroes</code> and <code class="language-text">HeroList</code> components to see what I mean.</p>\n<div class="gatsby-highlight">\n      <pre class="language-typescript"><code class="language-typescript"><span class="token comment">// /app/components/heroes/heroes.component.ts</span>\n<span class="token operator">...</span>\n@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n<span class="token operator">...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Heroes</span> <span class="token punctuation">{</span>\nheroes<span class="token punctuation">:</span> Observable<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">;</span>\naddingHero <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\nselectedHero<span class="token punctuation">;</span>\n\n    <span class="token keyword">constructor</span><span class="token punctuation">(</span>\n        <span class="token keyword">private</span> store<span class="token punctuation">:</span> Store<span class="token operator">&lt;</span>AppState<span class="token operator">></span><span class="token punctuation">,</span>\n        <span class="token keyword">private</span> heroActions<span class="token punctuation">:</span> HeroActions<span class="token punctuation">,</span>\n        <span class="token keyword">private</span> router<span class="token punctuation">:</span> Router\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>heroes <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">\'heroes\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">addHero</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>addingHero <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>selectedHero <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>addingHero <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">delete</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heroActions<span class="token punctuation">.</span><span class="token function">deleteHero</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">select</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>selectedHero <span class="token operator">=</span> hero<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>addingHero <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">gotoDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token string">\'/detail/\'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selectedHero<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>There\'s not a lot happening here, but it\'s all the logic we need to display and interact with the list of\nheroes. I\'ll come back to the constructor last as it\'s the most important regarding all the ngrx concepts.\nAll the other methods are just simple bits of logic we\'ll take as a result of things happening in the UI.\nYou can see in the delete method, we just simply dispatch a <code class="language-text">DELETE_HERO</code> action to the store.</p>\n<p>The constructor is where we tap in to the store to get our list of heroes. <code class="language-text">store.select()</code> returns an\nObservable based off of what you ask for. Here we\'re asking for the piece of <code class="language-text">AppState</code> that has the list of\nheroes. Once we have this Observable, how do we display it? Well, first let\'s take a look at the template\nfor this component.</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>My Heroes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rx-hero-list</span>\n    <span class="token attr-name">[heroes]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>heroes | async<span class="token punctuation">"</span></span>\n    <span class="token attr-name">[selectedHero]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectedHero<span class="token punctuation">"</span></span>\n    <span class="token attr-name">(onSelect)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>select($event)<span class="token punctuation">"</span></span>\n    <span class="token attr-name">(onDelete)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>delete($event)<span class="token punctuation">"</span></span>\n<span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rx-hero-list</span><span class="token punctuation">></span></span>\n\n...</code></pre>\n      </div>\n<p>Here we\'re passing the info we need for display to our <code class="language-text">rx-hero-list</code> component. We pass the list of heroes and\nthe selected hero as inputs, and then subscribe to two events as outputs. The important point to notice\nis the use of the <code class="language-text">async</code> pipe. This pipe essentially automatically subscribes to the observable for\nus, and returns any emitted values. This means that the <code class="language-text">rx-hero-list</code> component only needs to know that\nit\'s getting a list of heroes. It doesn\'t need to worry itself with any Observable business at all.</p>\n<p>Now let\'s look at that display component.</p>\n<div class="gatsby-highlight">\n      <pre class="language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span>Component<span class="token punctuation">,</span> Input<span class="token punctuation">,</span> Output<span class="token punctuation">,</span> EventEmitter<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@angular/core\'</span><span class="token punctuation">;</span>\n\n@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n<span class="token operator">...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HeroList</span> <span class="token punctuation">{</span>\n@<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> heroes<span class="token punctuation">;</span>\n@<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> selectedHero<span class="token punctuation">;</span>\n\n    @<span class="token function">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> onSelect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    @<span class="token function">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> onDelete <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">delete</span><span class="token punctuation">(</span>$event<span class="token punctuation">,</span> hero<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        $event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>onDelete<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>This is a good example of what a display component should be. It focuses on the data it needs\nto display and what events it should fire off. The only bit of logic here is to avoid events bubbling up on\nbutton click. The <code class="language-text">heroes</code> input isn\'t an observable, as the <code class="language-text">async</code> pipe in the container component handles\nunwrapping that for us. This makes dealing with the incoming data simple, and makes the template simple for\nus as well.</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>heroes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span>\n        <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>let hero of heroes<span class="token punctuation">"</span></span>\n        <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onSelect.emit(hero)<span class="token punctuation">"</span></span>\n        <span class="token attr-name">[class.selected]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hero === selectedHero<span class="token punctuation">"</span></span>\n    <span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hero-element<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>badge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{hero.id}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> {{hero.name}}\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>delete-button<span class="token punctuation">"</span></span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>delete($event, hero)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Delete<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>Nice and simple. We just loop over the list of heroes and display them, and then emit the events that we need to\nwhen the user interacts with the elements. The container <code class="language-text">Heroes</code> component will pass in the data and subscribe to the output events.\nWhen one of the events emits a new value, the container component will handle that and perform any relevant\nlogic. The display component doesn\'t need to know anything about how the logic of the application works,\nand is just concerned with displaying its data and sending out its events.</p>\n<p>Breaking the <code class="language-text">Heroes</code> component up into separate components like this goes a little further than the official\ntutorial does. I think this is a good illustration of how to separate logic from display using containers and\ndisplay components. There are other components in the application that I haven\'t shown here, but they follow\nmuch the same pattern.</p>\n<p>I\'ll quickly go over the <code class="language-text">HeroForm</code> component that is a display component for the <code class="language-text">HeroDetail</code> container. Here\'s\nthe relevant code:</p>\n<div class="gatsby-highlight">\n      <pre class="language-typescript"><code class="language-typescript">@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n<span class="token operator">...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HeroForm</span> <span class="token punctuation">{</span>\n_hero<span class="token punctuation">;</span>\n@<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">set</span> <span class="token function">hero</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>\\_hero <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">get</span> <span class="token function">hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_hero<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n    @<span class="token function">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> back <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    @<span class="token function">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> save <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>The important part here is in the set method for the <code class="language-text">hero</code> input property. The container is passing a hero in\nas an input. That could be either a hero from the server or a blank one depending on the route we used (check\nthe <code class="language-text">HeroDetail</code> component for that).</p>\n<p>So let\'s assume that we\'ve loaded a hero from the server. That hero is now in the store in the <code class="language-text">hero</code> part of\nthe <code class="language-text">AppState</code>. This <code class="language-text">HeroForm</code> component displays a simple form that has a text input for setting the name\nof the hero. If we just passed in the hero straight from the store and then attached the name property to\nthe input via <code class="language-text">ngModel</code>, we would be modifying the hero in the store. That\'s mutating state and we don\'t want\nto do that. What if we load <em>Batman</em> and start to change the name to <em>Batfleck</em> but then change our minds?\nOops, we\'ve mutated the state and will need to reload from the server to get back to <em>Batman</em>.</p>\n<p>To avoid this, the setter sets a backing field as a copy using Object.assign. This way when we set up a two-way\nbinding with <code class="language-text">ngModel</code> we\'re mutating our copy and not the state. We can then emit that copy back out to the\ncontainer, which can then send it on to the store via a dispatched action. This keeps the data flowing in a\nstrictly unidirectional manner, and can greatly simplify change detection and improve performance. See\n<a href="http://blog.thoughtram.io/angular/2016/02/22/angular-2-change-detection-explained.html">Pascal Precht\'s brilliant post</a>\non change detection in Angular 2 for more info on this.</p>\n<h3>Wrap Up</h3>\n<hr>\n<p>Hopefully this shows how ngrx/store, ngrx/effects, and Angular 2 all work together, but really, I hope it shows\nwhat the benefit is of following this particular architecture. By enforcing a unidirectional flow of data\nthrough the application, you simplify the reasoning of how changes to that data happen in the application.\nTwo-way binding is wonderful tool, but when that binding makes changes several layers up through your code,\nit can become really difficult to understand what happened when something goes wrong. With ngrx/store, when\nyour state changes in some way you didn\'t expect, it\'s pretty easy to figure out where it happened.</p>\n<p>You can grab the full source for this post on <a href="https://github.com/bodiddlie/rxheroes">my github</a>. Again,\ndon\'t take anything I\'ve written here as the way things should be done. This is the way I\'ve found\nthat works for me right now. That might change in the future and I very well could be doing something\negregiously wrong. I\'m learning this as I go, and I\'m sure I\'ll look at this in a few months and shudder.\nIf you see something here that needs fixing or is just a plain bad idea, let me know in the comments or\nhit me up on <a href="https://twitter.com/bodiddlie">twitter</a>.</p>',
frontmatter:{title:"Angular 2 Tour of Heroes Tutorial With the NGRX Suite",date:"Jun 21, 2016"},fields:{slug:"/ng-2-toh-with-ngrx-suite/"}}},pathContext:{slug:"/ng-2-toh-with-ngrx-suite/"}}}});
//# sourceMappingURL=path---ng-2-toh-with-ngrx-suite-94ac28e5a9410cbb5338.js.map