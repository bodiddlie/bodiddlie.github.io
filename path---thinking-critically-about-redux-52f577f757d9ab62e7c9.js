webpackJsonp([8196596157180],{337:function(e,t){e.exports={data:{site:{siteMetadata:{url:"https://bodiddlie.github.io"}},markdownRemark:{html:'<p>When someone new to React asks online how to handle state or passing of props in\ntheir application, the answer often includes using Redux. While I\nthink that Redux is a fantastic library and love using it, this post will hopefully illustrate\nwhy it isn\'t always necessary or even a good idea.</p>\n<h3>Hammer Time.....Stop</h3>\n<hr>\n<p>When I first started learning React, nearly every blog post, article, or tutorial I read\nalso included Redux. Many places refer to the two as React/Redux, as if they are somehow\ninseparable or part of one larger framework. This is unfortunate, as React itself presents\nbeginners with enough challenges to learning without the complexities of Redux thrown in.\nIt also turns into the old problem of if the only tool you have is a hammer, everything\nbegins to look like a nail.</p>\n<p>Redux is a tool that you can add to an application, and is not a necessary part of React. React\nisn\'t even necessary to use Redux, that\'s just where it is used the most. Fully\ngrokking the concept of state, and how it differs from props takes a little time when first\nbeing introduced to React. Adding Redux to the mix doesn\'t alleviate the need to understand\nthese concepts, and just ends up adding more complexity to wrap your head around. Dan Abramov, the\ncreator of Redux, wrote a <a href="https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367#.u4inwzlbh">great post</a>\nabout Redux being completely unnecessary for most applications. In it, he describes how\nthe simple concept of state in components is <em>perfectly fine</em> for most applications.</p>\n<h3>Do you even lift?</h3>\n<hr>\n<p>The most common use case for Redux that I encounter is for managing shared state. There are two\nseparate components that need to somehow reflect the same data. Loading that data in each\ncomponent\'s <code class="language-text">componentDidMount</code> is a bad idea, so you need some other way to load it in one place and\nthen share out to each component. Using Redux may seem like a perfect fit, but local state\nmight be a simpler and more proper solution.</p>\n<p>The main concept to understand in using local state is to <em>lift</em> that state to a common\nancestor. So if you have a <code class="language-text">&lt;Widget/&gt;</code> and a <code class="language-text">&lt;Doodad/&gt;</code> that need to share a list of\n<strong>Whatchamacallits</strong>, you would need to look up the component hierarchy for a common\nancestor. For example, if these two components are contained in a <code class="language-text">&lt;Panel/&gt;</code>,\nit might make sense to have the <strong>Panel</strong> be responsible for loading the data and then\npassing it down via props. The React docs even have\n<a href="https://facebook.github.io/react/docs/lifting-state-up.html">a page specifically about this concept</a>.</p>\n<p>This can easily become tedious if there are multiple levels of components to pass props. In that situation, my first suggestion would be to\nexamine carefully how the component hierarchy is structured. Are the levels\nof components really providing a value? If not, it\'s time for a refactor. Also, all those levels\nmight not be necessary and you could flatten the hierarchy. Dan Abramov once again has some great <a href="https://www.reddit.com/r/reactjs/comments/5lbp9a/how_to_update_state_in_parents_parent/dbur5os/">insight into this</a>.\nIf they are necessary you may be already typing <code class="language-text">yarn add redux</code> (because <a href="https://yarnpkg.com">yarn is awesome</a>),\nbut wait....</p>\n<h3>Providing a little context</h3>\n<hr>\n<p>If the shared state you\'re working with is small and isn\'t going to change a lot, there\nis a mechanism built in to React that might be a good fit: context. The React docs\nhave a lot of <a href="https://facebook.github.io/react/docs/context.html">scary things to say</a>\nabout using context, but it is a perfectly viable solution if you pay attention and use\nit correctly and carefully. In fact, context is how <a href="https://github.com/reactjs/react-redux">React-Redux</a>\nis able to connect the store to your components. It\'s just all abstracted away inside of\na Higher Order Component.</p>\n<p>In an app I\'ve been working on, the only real piece of shared state is the current user.\nSeveral components need the ID of the current user in order to load data from the server.\nPassing it down via props is possible, but tedious. I find it is simpler to actually provide the ID in context\nfrom the <code class="language-text">&lt;App /&gt;</code> component. Now any component under <code class="language-text">&lt;App /&gt;</code> can get that ID from context\nshould it be needed.</p>\n<p>The key here is that what you pass around via context should be minimized. The official docs\nwarn that this is an experimental API and could undergo breaking changes at any time. Many\ncritical libraries are currently using context. I don\'t think the React team is likely to\nactually make such changes, but the warning is there for a reason. As long as you keep the use\nto a minimum, you minimize the risks that your app might break in the future.</p>\n<h3>We\'re gonna need a bigger boat</h3>\n<hr>\n<p>If you\'re sharing a lot of data, have data that changes frequently and your component\nhierarchy requires multiple levels such that passing via props doesn\'t work, then it\nprobably is time to consider something like Redux or Mobx. At this point your application\nis sufficiently complex that the addition of these libraries would likely be a major\nbenefit.</p>\n<p>Many apps don\'t need the added complexity of working\nwith Redux. Applying some careful analysis to how your app is structured and what it is\nsupposed to do will probably reveal whether or not you need to add Redux at all. One of\nReact\'s greatest selling points in my opinion, is that you only have to bring in what you\nneed. See if you can build something with just React, and if you can\'t, then reach for\nRedux.</p>',frontmatter:{title:"Thinking Critically About Redux In Your Application",date:"Jan 02, 2017"},fields:{slug:"/thinking-critically-about-redux/"}}},pathContext:{slug:"/thinking-critically-about-redux/"}}}});
//# sourceMappingURL=path---thinking-critically-about-redux-52f577f757d9ab62e7c9.js.map