webpackJsonp([36345822244427],{328:function(n,s){n.exports={data:{site:{siteMetadata:{url:"https://bodiddlie.github.io"}},markdownRemark:{html:'<p>Last month saw the release of React v16.3, and with it the much talked about new context API. The <a href="https://reactjs.org/docs/context.html">official docs</a> have some great examples of how the new API works and even has a brief description of why you might use it. I\'d like to take a moment to clearly lay out exactly how and why I\'ve been using context in my applications, and why I\'m so excited for this new API.</p>\n<h3>New App, Who This?</h3>\n<hr>\n<p>Most applications have some concept of a currently logged in user. Apps can then use that user info for any number of purposes. Whether it\'s to display a profile page, render a list of photos, or just for simple authentication the app will need that user info. That means that potentially many parts of the app need to be aware of the current user.</p>\n<p>In the React apps that I\'ve worked on, I\'ve been using the context API for a couple years now to pass that user info around. Most of the apps I build for work are simple line-of-business applications that don\'t have a lot of global state to manage, so introducing something like redux would be overkill. Context allows me to share a small amount of state around the app very easily.</p>\n<p>However, prior to v16.3, the context API was labeled as unstable and the official docs discouraged its use. To illustrate why, here\'s an example of directly embedding the context API in a component:</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token comment">// this was the wrong way</span>\n<span class="token keyword">class</span> <span class="token class-name">ComponentThatNeedsUserInfo</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> contextTypes <span class="token operator">=</span> <span class="token punctuation">{</span>\n    user<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span><span class="token function">shape</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// call some api using info from this.context.user</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>This works, but is incredibly fragile. If the context API were to change as the docs suggested it might, I would have to change every place in my code that touches the context API. To minimize the impact of those changes, I always wrap my context use in utility components:</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token comment">// root provider of context</span>\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> childContextTypes <span class="token operator">=</span> <span class="token punctuation">{</span>\n    user<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span><span class="token function">shape</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">getChildContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>user<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// user loading and setting of state in other lifecycle methods</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// render prop component to get user</span>\n<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> contextTypes <span class="token operator">=</span> <span class="token punctuation">{</span>\n    user<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span><span class="token function">shape</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// now use the render prop to get the user info</span>\n<span class="token keyword">const</span> <span class="token function-variable function">NeedsUser</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>User</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>user <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>User</span><span class="token punctuation">></span></span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>And because <a href="https://www.youtube.com/watch?v=BcVAq3YFiuc">render-props are awesome</a>, I can use that component to build a higher-order component, just in case I or another developer would rather use that.</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">withUser</span><span class="token punctuation">(</span>Component<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> React<span class="token punctuation">.</span>Component <span class="token punctuation">{</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>User</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>user <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Component</span> <span class="token attr-name">user</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>user<span class="token punctuation">}</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">this</span><span class="token punctuation">.</span><span class="token attr-value">props</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>User</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3>Consuming What is Provided</h3>\n<hr>\n<p>So what\'s changed now that v16.3 has dropped? First, no more static properties for <code class="language-text">contextTypes</code> and <code class="language-text">childContextTypes</code>. Instead we have a simple provider component that we feed the value we want to pass around via context.</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> UserContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span>someDefaultUserValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//we\'ve loaded the user somewhere else in this component</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> user <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UserContext.Provider</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>user<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RestOfApp</span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>UserContext.Provider</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>There are two important bits here at lines 1 and 9. Line 1 shows the creation of our new context components (I\'ll get to why that is pluralized in a moment). The important thing to note here is the default value that we pass in to React.createContext. This will allow you to specify some sort of default that will be provided if the value is requested somehow before it has been set, e.g. loading user info asynchronously.</p>\n<p>Line 9 is where we use the first of the context components. The <code class="language-text">Provider</code> component takes one prop: <code class="language-text">value</code>. This is the value that you want to pass around via context. The <code class="language-text">Provider</code> component will then simply render its children.</p>\n<p>The second component that <code class="language-text">createContext</code> gives us is the <code class="language-text">Consumer</code>. We use this component anywhere we want to "consume" the value that context is providing us.</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">NeedsUser</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UserContext.Consumer</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>user <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>UserContext.Consumer</span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Notice anything interesting? The way we use the consumer component is <em>exactly</em> the same as the render-prop component from the earlier example! Even more lines of code eliminated, since we don\'t have to create a render-prop component. <code class="language-text">createContext</code> takes care of all of that for us.</p>\n<p>Another nice thing is that with the help of ES6 destructuring we can avoid typing out <code class="language-text">UserContext.Provider</code> or <code class="language-text">UserContext.Consumer</code>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token punctuation">{</span>Provider<span class="token punctuation">,</span> Consumer<span class="token punctuation">}</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>\n\n<span class="token comment">// you can rename if you\'re creating multiple contexts</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span>Provider<span class="token punctuation">:</span> UserProvider<span class="token punctuation">,</span> Consumer<span class="token punctuation">:</span> User<span class="token punctuation">}</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span>Provider<span class="token punctuation">:</span> ThemeProvider<span class="token punctuation">,</span> Consumer<span class="token punctuation">:</span> Theme<span class="token punctuation">}</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h3>Conclusion</h3>\n<hr>\n<p>This new API provides a simple and concise way to share state throughout your component tree. If you just need to share a small amount of state, this is the perfect mechanism to do so. Once you have a more significant amount of global state to manage, it would then make sense to look at tools like redux or MobX.</p>',frontmatter:{title:"Taking React in Context",date:"Apr 06, 2018"},fields:{slug:"/create-context/"}}},pathContext:{slug:"/create-context/"}}}});
//# sourceMappingURL=path---create-context-39f387ae258b70675ddb.js.map