webpackJsonp([0xbe5b43be6c07],{328:function(n,s){n.exports={data:{site:{siteMetadata:{url:"https://bodiddlie.github.io"}},markdownRemark:{html:'<p><a href="https://firebase.google.com">Firebase</a> is a really cool Backend-as-a-Service (BaaS) similar\nto the now defunct Parse. They have a great free tier that I think is quite generous.\nFirebase offers a real-time database, storage options, hosting, and many other nice\nfeatures worth checking out.</p>\n<p>One feature that I really like is Authentication. Firebase Auth allows\nyou to use a bunch of different auth providers (Twitter, Google, Facebook, etc) for\nyour app. It\'s quite simple to set up if you follow the\n<a href="https://firebase.google.com/docs">docs</a>. Once set up, you\'ll need to figure out how\nit will fit in with your app; meaning protecting routes from being accessed by unauthorized\nusers, and how you utilize the currently logged in user throughout the app. In this post I\'ll\nshow how I\'ve been handling all this in a React app using the alpha of React Router v4.</p>\n<h3>Initial Setup</h3>\n<hr>\n<p>Once you\'ve set up a project on the Firebase site, you need to get your app ready to use\nit. Here\'s an example of how I do it in my app:</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> firebase <span class="token keyword">from</span> <span class="token string">\'firebase\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//your settings from Firebase</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">//the root app just in case we need it</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> firebaseApp <span class="token operator">=</span> firebase<span class="token punctuation">.</span><span class="token function">initializeApp</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> db <span class="token operator">=</span> firebaseApp<span class="token punctuation">.</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//the real-time database</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> auth <span class="token operator">=</span> firebaseApp<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//the firebase auth namespace</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> storageKey <span class="token operator">=</span> <span class="token string">\'KEY_FOR_LOCAL_STORAGE\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isAuthenticated</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span>auth<span class="token punctuation">.</span>currentUser <span class="token operator">||</span> <span class="token operator">!</span><span class="token operator">!</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>storageKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Most of the code above is straight out of the set up documentation for a Firebase web\napp. I set up the connection to firebase and exported the database and auth namespaces for\nuse throughout the app. The important part here is starting on line 13. I created and exported\na simple string constant <code class="language-text">storageKey</code>. This is used in the simple function <code class="language-text">isAuthenticated</code>.\nI checked if the <code class="language-text">auth.currentUser</code> is currently set. If it isn\'t, I look in local storage for\nthat key. I\'ll show where I set that item in local storage in a later snippet.</p>\n<p>You might be wondering why I check <code class="language-text">auth.currentUser</code> and local storage instead of\nusing <code class="language-text">onAuthStateChanged</code> like the Firebase documentation recommends. I actually do use\n<code class="language-text">onAuthStateChanged</code> as you\'ll see in the next snippet, but the reason for this check\nis because when the page loads and the routes are getting parsed and validated, the\n<code class="language-text">currentUser</code> variable hasn\'t been finalized yet. This means that if someone is\ntrying to access a route that should only be available to authenticated users, they will\nalways be denied access if the route is the first thing they load on the page or if they\nreload.</p>\n<p>There are <a href="http://stackoverflow.com/questions/37370599/firebase-auth-delayed-on-refresh">some examples</a>\nout there about how to work around this problem using local storage and searching for an\nitem that the Firebase SDK sets. However, I ran into an issue with IE11 where that item\ndid not exist in local storage. I haven\'t yet been able to find where it is in IE11, but\nrather than digging into that nightmare, I went with the simple solution of setting my\nown item. I do that in the root <code class="language-text">&lt;App /&gt;</code> component:</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span>\n    uid<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    auth<span class="token punctuation">.</span><span class="token function">onAuthStateChanged</span><span class="token punctuation">(</span>user <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>storageKey<span class="token punctuation">,</span> user<span class="token punctuation">.</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> uid<span class="token punctuation">:</span> user<span class="token punctuation">.</span>uid <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>storageKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> uid<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Here I\'m just starting the listener for <code class="language-text">onAuthStateChanged</code> when the component mounts.\nInside the listener I set the item in local storage based off of if I have a user or not.\nThen I can move on to protecting routes in the app so that only authenticated users can\naccess them.</p>\n<h3>Procting Routes</h3>\n<hr>\n<p>I\'ve been playing with the alpha of v4 of the excellent <a href="https://react-router.now.sh/">React Router</a>.\nI really like the new API that they\'re going with, particularly for route configuration.\n<code class="language-text">OnEnter</code> hooks are now no longer necessary for protecting routes and a nice, declarative\napproach can be taken instead. Here\'s an example route setup :</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  <span class="token comment">//snip our user stuff from earlier</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BrowserRouter</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Match</span> <span class="token attr-name">exactly</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>HomePage<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Match</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Login<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MatchWhenAuthorized</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/protected<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>ProtectedPage<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>BrowserRouter</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">MatchWhenAuthorized</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> component<span class="token punctuation">:</span> Component<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>Match\n    <span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span>\n    render<span class="token operator">=</span><span class="token punctuation">{</span>renderProps <span class="token operator">=></span>\n      <span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Component</span> <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">renderProps</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n      <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>\n        <span class="token operator">&lt;</span>Redirect\n          to<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n            pathname<span class="token punctuation">:</span> <span class="token string">\'/login\'</span><span class="token punctuation">,</span>\n            state<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> renderProps<span class="token punctuation">.</span>location <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">}</span>\n        <span class="token operator">/</span><span class="token operator">></span>\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token operator">/</span><span class="token operator">></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>The render method is just setting up a pretty simple route config. The magic really comes\nfrom the new <code class="language-text">Match</code> component in React Router v4. Because of the new API with this\ncomponent, I can actually compose a new component to declaratively handle route\nprotection.</p>\n<p><code class="language-text">MatchWhenAuthorized</code> isn\'t a part of the React Router API, but this example is pulled\nstraight from their <a href="https://react-router.now.sh/auth-workflow">docs</a>. Basically, it\npiggy-backs on the <code class="language-text">Match</code> component, using ES6 rest/spread to pass the props given to\nit. The really interesting part is the <code class="language-text">render</code> prop on <code class="language-text">Match</code>. This prop takes a function\nthat will be passed all the props that the component would get on a regular match, but\nallows you to do some extra manipulation. In this example, I check if the user is authenticated and if so\nrender the given component. If not, I use the React Router <code class="language-text">Redirect</code> component to send\nthe user to the login page.</p>\n<h3>Logging In</h3>\n<hr>\n<p>So now that the app has a route that only logged in users can see, I need to provide a\nway for users to actually log in. Here I\'m only dealing with email/password authentication,\nso you would need to provide similar workflows for dealing with oAuth providers.</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Login</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\nstate <span class="token operator">=</span> <span class="token punctuation">{</span>\nemail<span class="token punctuation">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\npassword<span class="token punctuation">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\nredirectToReferrer<span class="token punctuation">:</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span>\n\n<span class="token function-variable function">handleSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span>evt<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\nevt<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nauth<span class="token punctuation">.</span><span class="token function">signInWithEmailAndPassword</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>email<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>redirectToReferrer<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token keyword">from</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>location<span class="token punctuation">.</span>state <span class="token operator">||</span> <span class="token string">\'/\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span>redirectToReferrer<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span>\n        <span class="token punctuation">{</span>redirectToReferrer <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Redirect</span> <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">from</span> <span class="token operator">||</span> <span class="token string">\'/protected\'</span><span class="token punctuation">}</span></span><span class="token punctuation">/></span></span>\n        <span class="token punctuation">)</span><span class="token punctuation">}</span>\n        <span class="token punctuation">{</span><span class="token keyword">from</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>You must log <span class="token keyword">in</span> to view the page at <span class="token punctuation">{</span><span class="token keyword">from</span><span class="token punctuation">.</span>pathname<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n        <span class="token punctuation">)</span><span class="token punctuation">}</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>email<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>e <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>setState<span class="token punctuation">{</span>email<span class="token punctuation">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>password<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>e <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>setState<span class="token punctuation">{</span>password<span class="token punctuation">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Sign In<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>This is just standard form handling. The interesting bit is in <code class="language-text">render</code> where I check for\n<code class="language-text">redirectToReferrer</code>. This bool gets set to true once the user has successfully signed\nin. If true, I use the React Router <code class="language-text">Redirect</code> component to send them to either the route\nthey requested or a default route if they just went straight to the login page.\nNow the user is logged in and can access the protected route, how do I utilize the currently\nlogged in user?</p>\n<h3>Current User</h3>\n<hr>\n<p>For this simple example, I\'m going to use a list of to-do items. A logged in user should only\nbe able to see the items that they have entered. A simple way to structure this data in\nthe Firebase real-time database would be like this:</p>\n<div class="gatsby-highlight">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"todos"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"userid1"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"todo1"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"Do something"</span><span class="token punctuation">,</span> <span class="token property">"complete"</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token property">"todo2"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"Do something"</span><span class="token punctuation">,</span> <span class="token property">"complete"</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token property">"todo3"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"Do something"</span><span class="token punctuation">,</span> <span class="token property">"complete"</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token property">"todo4"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"Do something"</span><span class="token punctuation">,</span> <span class="token property">"complete"</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">"userid2"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"todo5"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"Do something"</span><span class="token punctuation">,</span> <span class="token property">"complete"</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token property">"todo6"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"Do something"</span><span class="token punctuation">,</span> <span class="token property">"complete"</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token property">"todo7"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"Do something"</span><span class="token punctuation">,</span> <span class="token property">"complete"</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token property">"todo8"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"Do something"</span><span class="token punctuation">,</span> <span class="token property">"complete"</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Under the top to-dos object is a list of user ids. Under each user id is the list of to-do\nitems for that user. In a more complicated application you would want to denormalize\nthis data to reduce load size and simplify queries, but that\'s outside the scope\nof this post. See the great <a href="https://www.youtube.com/playlist?list=PLl-K7zZEsYLlP-k-RKFa7RyNPa9_wCH2s">YouTube playlist from Firebase</a>\nfor more info.</p>\n<p>Retrieving this data means that we need the uid of the current user. We can check\n<code class="language-text">auth.currentUser</code> but that won\'t be guaranteed to be set by the time the component\nrenders if the user was already logged in (ie first visit or page refresh). Reading\nfrom local storage might work, but I could see arguments for not storing the uid for\nsecurity reasons. To provide the uid, we go back to the <code class="language-text">&lt;App/&gt;</code> component and add\nthe uid to context.</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> childContextTypes <span class="token operator">=</span> <span class="token punctuation">{</span>\n    uid<span class="token punctuation">:</span> React<span class="token punctuation">.</span>PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">getChildContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span> uid<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>uid <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">//snip prior stuff</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Now whenever the user auth state changes, the uid will be updated in context. In order\nfor a component to use the uid, it will need to request it from context. I could just\nadd a <code class="language-text">contextTypes</code> to all the components that need it, but that isn\'t the best idea because\nthe context API is still experimental and could change. This would mean I would need to\nupdate each component that used <code class="language-text">contextypes</code> if something did change. The way around this is to\nextract that functionality into something that will provide the uid for me.</p>\n<p>I could do this with a HOC (higher order component) like in <a href="https://medium.com/@mweststrate/how-to-safely-use-react-context-b7e343eff076#.xaikh4ldc">this post</a>\nby Michael Westrate and linked in the official React docs. I however have taken a liking\nto the function-as-child pattern and used it for this. If you aren\'t familiar with the\nfunction-as-child pattern, check out <a href="https://medium.com/merrickchristensen/function-as-child-components-5f3920a9ace9#.2e0r9gutx">this post</a>\nby Merrick Christensen.</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">UidProvider</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> contextTypes <span class="token operator">=</span> <span class="token punctuation">{</span>\n    uid<span class="token punctuation">:</span> React<span class="token punctuation">.</span>PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Using this simple component, I can declaratively provide the uid to any components that\nneed it.</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">ProtectedPage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UidProvider</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>uid <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SomeComponentThatNeedsUID</span> <span class="token attr-name">uid</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>uid<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>UidProvider</span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>I like this function-as-child pattern because I\'m not bound to what props a HOC might\ndeclare. I have full control over how the information is provided to my components. Now that\nthe uid is getting passed in to the component that needs it, it can be used in whatever way\nthe component needs. Anywhere else in the application that might need to use the uid can\nsimply use the <code class="language-text">UidProvider</code> component and be safe from any changes in the React context API.</p>\n<hr>\n<p>By combining the great features of Firebase, React, and React Router, I have a simple\nway to authenticate users in my app. The new APIs provided by React Router v4 allow for my\nroute configurations to be much more expressive and declarative. This makes the code easier\nto reason about, especially when returning to it after some time away.</p>',
frontmatter:{title:"Firebase Auth with React Router v4",date:"Jan 11, 2017"},fields:{slug:"/firebase-auth-with-react-router/"}}},pathContext:{slug:"/firebase-auth-with-react-router/"}}}});
//# sourceMappingURL=path---firebase-auth-with-react-router-8101f57b13f166d6f45c.js.map